EXAMPLE 42 PUPPET INFRASTRUCTURES

Here you can find a sample layout of a Puppet infrastructure that can be seen as a starting idea
on how you can organize your Puppet configuration. 

Note that you have 2 ways to define nodes in Puppet:
- Via Puppet manifests, using the "node" definitions
- Via an External Node Classifier (ENC), such as Dashboard or Foreman or whatever custom source,
  where you may have a GUI that helps in setting nodes and their variables.

The general logic is that for each node you have to set variables (eventually using different methods)
and include classes (that generally are placed in omonimous modules).

If you choose the first approach (which is the default when you install Puppet) you might find useful 
the infrastructure layout  provided here.
Note that in this case, when no ENC is used, the first module that the PuppetMaster checks is:
/etc/puppet/manifests/site.pp
from here you can import all the additional files you want and include the classes that are present in your modules.

The approach used here is based on a nodes's inheritance layout where you can set and override variables
at different levels ("zones") of the nodes' tree.
Each "real" node may inherit a "zone" node includes (be part of) one and only one role.
A role is justa agrouping class that includes all the classes/defines necessary for a group of servers with the same functionality.

Note that various people and some books don't reccommend this approach since it
may lead to variables scoping issues and doesn't use and take advantage of parametrized classes.

In our humble but firm opinion this approach has proved to be one of the most flexible and usable approach
when using manifests in defining what nodes include and how they are configured.
It doesn't require Puppet versions superior to 2.6 and does not give ANY scoping problem if you follow 
a single, simple rule: NEVER include a class before setting a variable.
This results, practically, in having the basenode and all the intermediary "zone nodes" in the inheritance tree
with only variables settings (and overrides): NEVER include classes there.
Class inclusion is done only at the "real host node" level (the last element in the inheritance tree) where
you actually may just include a "general" class or a "role" class.
In role classes, again, you can set all the variables you want (related to the role) BEFORE the inclusion of 
the role's specific classes.

Note also that this is not the only approach in organizing manifests when you don't use an ENC, there are alternative solutions
which won't be commented here. Just be aware that the critics about the "nodes inheritance" approach 
are related to a wrong usage of this model. Follow the above reccomendations and you will forget scoping issues and 
find an extremely flexible way to manage your Puppet infrastructure.

This Example(42) layout is based on:
site.pp # Puppet "init" file, the first manifest processed by default by the PuppetMaster when compiling a catalog
        # Here are imported all the classes and nodes below
infrastructure.pp # Here is defined the basenode and the nodes' inheritance tree (the "zones")
                  # Customize according to your needs
baselines/*.pp # Some general classes used for default settings that apply to all nodes
roles/*.pp # Classes that define different roles 
           # Adapt, add and enlarge according to your needs
nodes/*.pp # Where single specific hnodes are defined
           # Here some sample nodes names. Obviously to change and customize

More directories are provided:
10_archive/ # Contains older infrastructures layouts. Kept for reference
toasters/ # Examples of master-less setups that can be used to quickly configure an appliance.

NOTE: This is a work in progress, use it only as a reference for real world and test usage of Example42 modules.

